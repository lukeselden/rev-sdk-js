{"version":3,"sources":["webpack://revSdk/webpack/universalModuleDefinition","webpack://revSdk/./src/Config.ts","webpack://revSdk/./src/Log.ts","webpack://revSdk/./src/VbrickSDK.ts","webpack://revSdk/./src/embed/EmbedVideo.ts","webpack://revSdk/./src/embed/EmbedWebcast.ts","webpack://revSdk/./src/embed/EventBus.ts","webpack://revSdk/./src/embed/IVbrickApi.ts","webpack://revSdk/./src/embed/PlayerStatus.ts","webpack://revSdk/./src/embed/VbrickEmbed.ts","webpack://revSdk/./src/embed/VbrickVideoEmbed.ts","webpack://revSdk/./src/embed/VbrickWebcastEmbed.ts","webpack://revSdk/./src/embed/WebcastStatus.ts","webpack://revSdk/./src/embed/webcastAuth.ts","webpack://revSdk/./src/util.ts","webpack://revSdk/webpack/bootstrap","webpack://revSdk/webpack/runtime/define property getters","webpack://revSdk/webpack/runtime/hasOwnProperty shorthand","webpack://revSdk/webpack/runtime/make namespace object","webpack://revSdk/./src/index.ts"],"names":[],"mappings":"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","file":"rev-sdk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"revSdk\"] = factory();\n\telse\n\t\troot[\"revSdk\"] = factory();\n})(self, function() {\nreturn ","import { VbrickSDKConfig } from './VbrickSDK';\r\n\r\nexport function resolveConfig<TConfig extends VbrickSDKConfig>(configuration: TConfig): TConfig {\r\n\tconst cfg = {\r\n\t\t...configuration\r\n\t};\r\n\tvalidateConfig(cfg);\r\n\treturn cfg;\r\n}\r\n\r\nfunction validateConfig(cfg: VbrickSDKConfig): void {\r\n\tif(!cfg.baseUrl?.match(/^https?:\\/\\//)) {\r\n\t\tthrow new Error('Rev SDK Error: baseUrl invalid');\r\n\t}\r\n}\r\n","import { VbrickSDKConfig } from \"./VbrickSDK\";\r\n\r\nexport interface ILogger {\r\n\tlog(message?: any, ...optionalParams: any[]): void;\r\n\terror(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\nexport function getLogger(cfg: VbrickSDKConfig): ILogger {\r\n\treturn cfg.log ? console : {\r\n/**\r\n * @internal\r\n */\r\n\t\tlog: noop,\r\n\t\terror: noop\r\n\t};\r\n}\r\n\r\nfunction noop (){}\r\n","\r\n/**\r\n * @public\r\n */\r\nexport enum TokenType {\r\n\tJWT = 'JWT',\r\n\tACCESS_TOKEN = 'AccessToken'\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface VbrickSDKToken {\r\n\ttype: TokenType;\r\n\r\n\t/**\r\n\t * String containing the token value\r\n\t */\r\n\tvalue: string;\r\n\r\n\t/**\r\n\t * The issuer for the token\r\n\t */\r\n\tissuer: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface VbrickSDKConfig {\r\n\t/**\r\n\t * URL for Rev\r\n\t */\r\n\tbaseUrl: string;\r\n\r\n\t/**\r\n\t * Token for authentication\r\n\t */\r\n\ttoken?: VbrickSDKToken;\r\n\r\n\t/**\r\n\t * If true, sdk will log to console\r\n\t */\r\n\tlog?: boolean;\r\n}\r\n","import { IVbrickVideoEmbed } from './IVbrickApi';\r\nimport { VbrickVideoEmbedConfig } from './VbrickEmbedConfig';\r\nimport { VbrickVideoEmbed } from './VbrickVideoEmbed';\r\nimport { lookupElement } from '../util';\r\nimport { resolveConfig } from '../Config';\r\n\r\n/**\r\n * Embed a VOD/video on a page, with optional token-based authentication. Returns a VbrickEmbed object for interacting with playback and receiving events.\r\n * @public\r\n * @param element - Container element where the embed content will be rendered. Either an HTMLElement or a CSS Selector string.\r\n * @param videoId - ID of the video to embed\r\n * @param config - A configuration object\r\n * @returns An {@link IVbrickVideoEmbed} object\r\n */\r\nexport function embedVideo(\r\n\telement: HTMLElement | string,\r\n\tvideoId: string,\r\n\tconfig: VbrickVideoEmbedConfig\r\n): IVbrickVideoEmbed {\r\n\tconst el = lookupElement(element);\r\n\tconst cfg = resolveConfig(config);\r\n\r\n\tconst video = new VbrickVideoEmbed(videoId, cfg, el);\r\n\tvideo.initialize().catch(() => {});\r\n\treturn video;\r\n}\r\n","import { IVbrickWebcastEmbed } from './IVbrickApi';\r\nimport { VbrickWebcastEmbed } from './VbrickWebcastEmbed';\r\nimport { lookupElement } from '../util';\r\nimport { resolveConfig } from '../Config';\r\nimport { VbrickWebcastEmbedConfig } from './VbrickEmbedConfig';\r\n\r\n/**\r\n * Embeds a webcast on the page\r\n * @public\r\n * @param element - Either a CSS selector string or HTML Element where the embed content will be rendered\r\n * @param webcastId - ID of the webcast to embed\r\n * @param config - A configuration object\r\n * @returns An {@link IVbrickWebcastEmbed} object\r\n *\r\n * @example\r\n * Embedding a webcast:\r\n * ```\r\n * //In HTML:  <div id=\"webcast-embed\"></div>\r\n *\r\n * const webcastId = '0d252797-6db7-44dc-aced-25a6843d529c';\r\n * revSdk.embedWebcast('#webcast-embed', webcastId, {\r\n *     showVideo: true,\r\n *     token\r\n * });\r\n * ```\r\n *\r\n */\r\nexport function embedWebcast(\r\n\telement: HTMLElement | string,\r\n\twebcastId: string,\r\n\tconfig: VbrickWebcastEmbedConfig\r\n): IVbrickWebcastEmbed {\r\n\r\n\tconst el = lookupElement(element);\r\n\tconst cfg = resolveConfig(config);\r\n\r\n\tconst webcast = new VbrickWebcastEmbed(webcastId, cfg, el);\r\n\twebcast.initialize().catch(() => {});\r\n\treturn webcast;\r\n}\r\n\r\n","import { VbrickSDKConfig } from \"../VbrickSDK\";\r\nimport { TVbrickEvent, IListener, TPlayerMethod, TAuthMethods, TWebcastMethod, TVbrickMessages } from './IVbrickEvents';\r\n\r\n// default to 30 second timeout on authentication/SDK communication\r\nconst DEFAULT_TIMEOUT = 30 * 1000;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class EventBus {\r\n\tprivate win: Window;\r\n\tprivate msgListener: (e: MessageEvent) => void;\r\n\tprivate readonly baseUrl: string;\r\n\tprivate readonly shouldLog: boolean;\r\n\tprivate isDestroyed: boolean = false;\r\n\r\n\tprivate eventHandlers: { [K in TVbrickEvent]?: Array<IListener<K>> } = {};\r\n\r\n\tconstructor(\r\n\t\tiframe: HTMLIFrameElement,\r\n\t\tconfig: VbrickSDKConfig\r\n\t){\r\n\t\tthis.win = iframe.contentWindow;\r\n\t\tthis.msgListener = this.handleMessage.bind(this);\r\n\r\n\t\tglobalThis.addEventListener('message', this.msgListener);\r\n\t\tthis.baseUrl = config.baseUrl;\r\n\t\tthis.shouldLog = !!config.log;\r\n\t}\r\n\r\n\tpublic on<T extends TVbrickEvent>(event: T, fn: IListener<T>) {\r\n\t\tconst handlers = this.getHandlers(event);\r\n\t\thandlers.push(fn);\r\n\r\n\t\treturn () => this.off(event, fn);\r\n\t}\r\n\r\n\tpublic awaitEvent(event: TVbrickEvent | TVbrickEvent[], failEvent: TVbrickEvent = 'error', timeout: number = DEFAULT_TIMEOUT): Promise<any> {\r\n\t\tconst events = Array.isArray(event) ? event : [event];\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst handler = (fn: (e: any) => void) => e => {\r\n\t\t\t\tfn(e);\r\n\t\t\t\toffHandlers.forEach(h => h());\r\n\t\t\t};\r\n\r\n\t\t\tconst onEvent: any = handler(resolve);\r\n\t\t\tconst onErr: any = handler(reject);\r\n\t\t\tconst offHandlers = events.map(evt => this.on(evt, onEvent));\r\n\r\n\t\t\tif(failEvent) {\r\n\t\t\t\toffHandlers.push(this.on(failEvent, onErr));\r\n\t\t\t}\r\n\r\n\t\t\tif(timeout > 0) {\r\n\t\t\t\tconst timer = setTimeout(() => {\r\n\t\t\t\t\tif (this.isDestroyed) { return; }\r\n\t\t\t\t\tonErr(event + ': timeout')\r\n\t\t\t\t}, timeout);\r\n\t\t\t\toffHandlers.push(() => clearTimeout(timer));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic off<T extends TVbrickEvent>(event: T, fn: IListener<T>): void {\r\n\t\tconst handlers = this.getHandlers(event);\r\n\t\tconst i = handlers.indexOf(fn);\r\n\t\tif(i >= 0) {\r\n\t\t\thandlers.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Posts a message to the embed */\r\n\tpublic publish(...[event, msg = undefined]: TAuthMethods | TPlayerMethod | TWebcastMethod): void {\r\n\t\tthis.shouldLog && console.log('rev client posting message. ', event);\r\n\t\tthis.win.postMessage({\r\n\t\t\tapp: 'vbrick',\r\n\t\t\tevent,\r\n\t\t\tmsg\r\n\t\t}, this.baseUrl);\r\n\t}\r\n\r\n\t/** Posts an 'error' message to the embed */\r\n\tpublic publishError(msg: string) {\r\n\t\tthis.win.postMessage({\r\n\t\t\tapp: 'vbrick',\r\n\t\t\tevent: 'error',\r\n\t\t\tmsg\r\n\t\t}, this.baseUrl);\r\n\t}\r\n\r\n\t/** Fires local event handlers */\r\n\tpublic emitLocalEvent<T extends TVbrickEvent>(event: T, msg: TVbrickMessages[T] = undefined): void {\r\n\t\tthis.callHandlers(event, msg);\r\n\t}\r\n\r\n\t/** Calls the local 'error' event handlers */\r\n\tpublic emitLocalError(msg: string, err: any) {\r\n\t\tthis.callHandlers('error', { msg, err });\r\n\t}\r\n\r\n\tprivate handleMessage(e: MessageEvent): void {\r\n\t\tconst data = e.data || {};\r\n\r\n\t\tif(e.origin !== this.baseUrl ||\r\n\t\t\tdata.app !== 'vbrick' ||\r\n\t\t\t!data.event) {\r\n\t\t\tthis.shouldLog && console.log('rev SDK dropping inbound message. ', e.data);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst shouldLog = this.shouldLog && data.event !== 'currentTime';\r\n\r\n\t\tshouldLog && console.log('rev SDK inbound message. ', e.data);\r\n\r\n\t\tthis.callHandlers(data.event, data.msg);\r\n\t}\r\n\r\n\tprivate callHandlers(event: string, data: any): void {\r\n\t\tconst handlers = Array.from(this.getHandlers(event));\r\n\t\thandlers.forEach(h => h(data));\r\n\t}\r\n\tprivate getHandlers(event: string): IListener<any>[] {\r\n\t\tconst h = this.eventHandlers;\r\n\t\tif(!h[event]) {\r\n\t\t\th[event] = [];\r\n\t\t}\r\n\t\treturn h[event];\r\n\t}\r\n\r\n\tpublic destroy(): void {\r\n\t\tif (this.isDestroyed) { return; }\r\n\t\tthis.isDestroyed = true;\r\n\t\tglobalThis.removeEventListener('message', this.msgListener);\r\n\t}\r\n}\r\n","import { WebcastStatus } from './WebcastStatus';\r\nimport { PlayerStatus } from './PlayerStatus';\r\nimport { VbrickSDKToken } from '../VbrickSDK';\r\nimport { TVbrickEvent, IListener, TEmbedMessages, TPlayerMessages, TWebcastMessages } from './IVbrickEvents';\r\nimport { IVideoInfo, IWebcastInfo, IWebcastLayout, ISubtitles, IBasicInfo } from \"./IVbrickTypes\";\r\n\r\nexport { WebcastStatus } from './WebcastStatus';\r\nexport { PlayerStatus } from './PlayerStatus';\r\nexport { TVbrickEvent, IListener, TEmbedMessages, TPlayerMessages, TWebcastMessages, TVbrickMessages } from './IVbrickEvents';\r\nexport * from './IVbrickTypes';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IVbrickBaseEmbed<TInfo extends IBasicInfo, Events extends string & TVbrickEvent = keyof TEmbedMessages> {\r\n\t/**\r\n\t* video playing, buffering, etc\r\n\t*/\r\n\treadonly playerStatus: PlayerStatus;\r\n\r\n\t/**\r\n\t * Player Volume. 0-1\r\n\t */\r\n\treadonly volume: number;\r\n\r\n\t/**\r\n\t * Whether subtitles are enabled, and selected language\r\n\t */\r\n\treadonly currentSubtitles: ISubtitles;\r\n\r\n\t/**\r\n\t * metadata of the video/webcast\r\n\t */\r\n\treadonly info: TInfo;\r\n\r\n\t/**\r\n\t * Plays the video if it is paused.\r\n\t */\r\n\tplay(): void;\r\n\r\n\t/**\r\n\t * Pauses the video if it is playing.\r\n\t */\r\n\tpause(): void;\r\n\r\n\t/**\r\n\t * Sets player volume\r\n\t * @param volume - number 0-1\r\n\t */\r\n\tsetVolume(volume: number): void;\r\n\r\n\t/**\r\n\t * Indicates whether the webcast is started, or broadcasting.\r\n\t * update the current subtitles settings\r\n\t * @param subtitles - enable/disable subtitles and set language (leave language blank to use closed captions encoded into video stream)\r\n\t */\r\n\tsetSubtitles(subtitles: ISubtitles): void;\r\n\r\n\t/**\r\n\t * Register an event handler. Events are fired at different lifecycle stages of the webcast\r\n\t * @param event - name of event\r\n\t * @param listener - callback when event is fired. Keep a reference if you intend to call {@link IVbrickBaseEmbed.off} later\r\n\t */\r\n\ton<T extends Events>(event: T, listener: IListener<T>): void;\r\n\r\n\t/**\r\n\t * Removes an event listener\r\n\t */\r\n\toff<T extends Events>(event: T, listener: IListener<T>): void;\r\n\r\n\t/**\r\n\t * Removes the embedded content from the DOM.\r\n\t */\r\n\tdestroy(): void;\r\n\r\n\t/**\r\n\t * Allows updating the access token if the old one has expired.\r\n\t * @param token - New token\r\n\t */\r\n\tupdateToken(token: VbrickSDKToken): Promise<void>;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IVbrickVideoEmbed extends IVbrickBaseEmbed<IVideoInfo, keyof (TEmbedMessages & TPlayerMessages)> {\r\n\t/**\r\n\t * Current position in video in seconds\r\n\t */\r\n\treadonly currentTime: number;\r\n\r\n\t/**\r\n\t * Duration of video in seconds. Will be undefined for live content\r\n\t */\r\n\treadonly duration?: number;\r\n\r\n\t/**\r\n\t * Contains metadata for the video\r\n\t * @deprecated Use `info` instead\r\n\t */\r\n\treadonly videoInfo: IVideoInfo;\r\n\r\n\t/**\r\n\t * sets playback rate \r\n\t * @param speed - 0-16, default is 1\r\n\t */\r\n\tsetPlaybackSpeed(speed: number): void;\r\n\r\n\t/**\r\n\t * sets the current time in the video\r\n\t * @param currentTime - value (in seconds) between 0 and video duration\r\n\t */\r\n\tseek(currentTime: number): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IVbrickWebcastEmbed extends IVbrickBaseEmbed<IWebcastInfo, keyof (TEmbedMessages & TWebcastMessages)> {\r\n\t/**\r\n\t * Indicates whether the webcast is started, or broadcasting.\r\n\t */\r\n\treadonly webcastStatus: WebcastStatus;\r\n\r\n\t/**\r\n\t * Change the visibility of video/slides. Only applicable when the \"showFullWebcast\" config\r\n\t * flag is enabled and the event includes slides\r\n\t * @param layout  - set if video/slides are displayed\r\n\t */\r\n\tupdateLayout(layout: IWebcastLayout): void;\r\n}\r\n","/**\r\n * @public\r\n */\r\nexport enum PlayerStatus {\r\n\tInitializing = 'Initializing',\r\n\tPlaying = 'Playing',\r\n\tPaused = 'Paused',\r\n\tBuffering = 'Buffering',\r\n\tSeeking = 'Seeking',\r\n\tEnded = 'Ended',\r\n\tError = 'Error'\r\n}\r\n","import { EventBus } from './EventBus';\r\nimport { VbrickEmbedConfig } from './VbrickEmbedConfig';\r\nimport { getLogger, ILogger } from '../Log';\r\nimport { IVbrickBaseEmbed, PlayerStatus } from './IVbrickApi';\r\nimport { TokenType, VbrickSDKToken } from '../VbrickSDK';\r\nimport { TVbrickEvent, IListener } from './IVbrickEvents';\r\nimport { IBasicInfo, ISubtitles } from './IVbrickTypes';\r\n\r\n/**\r\n * Base class for embedded content.\r\n */\r\nexport abstract class VbrickEmbed<TInfo extends IBasicInfo> implements IVbrickBaseEmbed<TInfo> {\r\n\r\n\t/**\r\n\t* video playing, buffering, etc\r\n\t*/\r\n\tpublic get playerStatus(): PlayerStatus {\r\n\t\treturn this._playerStatus;\r\n\t}\r\n\tprivate _playerStatus = PlayerStatus.Initializing;\r\n\r\n\t/**\r\n\t* Player Volume. 0-1\r\n\t*/\r\n\tpublic get volume(): number {\r\n\t\treturn this._volume;\r\n\t}\r\n\tprivate _volume: number;\r\n\r\n\t/**\r\n\t * Whether subtitles are enabled, and selected language\r\n\t */\r\n\tpublic get currentSubtitles(): ISubtitles {\r\n\t\treturn this._currentSubtitles;\r\n\t}\r\n\tprivate _currentSubtitles: ISubtitles = { enabled: false };\r\n\r\n\tpublic get isLive(): boolean {\r\n\t\treturn this.info?.isLive;\r\n\t}\r\n\t\r\n\tpublic get info(): TInfo {\r\n\t\treturn this._info;\r\n\t}\r\n\tprivate _info?: TInfo;\r\n\r\n\tprotected iframe: HTMLIFrameElement;\r\n\tprotected readonly iframeUrl: string;\r\n\tprotected eventBus: EventBus;\r\n\tprivate init: Promise<any>;\r\n\tprivate unsubscribes: Array<() => void>;\r\n\tprotected logger: ILogger;\r\n\r\n\tconstructor(\r\n\t\tid: string,\r\n\t\tprotected readonly config: VbrickEmbedConfig,\r\n\t\tprotected readonly container: HTMLElement\r\n\t) {\r\n\t\tthis.iframeUrl = this.getEmbedUrl(id, this.config);\r\n\t\tthis.logger = getLogger(this.config);\r\n\t}\r\n\r\n\t/**\r\n\t * Plays the video if it is paused.\r\n\t */\r\n\t public play(): void {\r\n\t\tthis.eventBus.publish('playVideo');\r\n\t}\r\n\t/**\r\n\t  * Pauses the video if it is playing.\r\n\t  */\r\n\tpublic pause(): void {\r\n\t\tthis.eventBus.publish('pauseVideo');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets player volume\r\n\t * @param volume {number} 0-1\r\n\t */\r\n\tpublic setVolume(volume: number): void {\r\n\t\tthis.eventBus.publish('setVolume', { volume });\r\n\t}\r\n\r\n\t/**\r\n\t * update the current subtitles settings\r\n\t * @param subtitles enable/disable subtitles and set language (leave language blank to use closed captions encoded into video stream)\r\n\t */\r\n\tpublic setSubtitles(subtitles: ISubtitles) {\r\n\t\tthis.eventBus.publish('setSubtitles', subtitles);\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates the embedded content was initialized and authenticated.\r\n\t * If there was a problem loading the content, or a problem with the token, the promise will be rejected.\r\n\t */\r\n\tpublic initialize(): Promise<void> {\r\n\t\tif (this.init) {\r\n\t\t\treturn this.init;\r\n\t\t}\r\n\t\tthis.iframe = this.render();\r\n\t\tthis.eventBus = new EventBus(this.iframe, this.config);\r\n\t\tthis.initializeEmbed();\r\n\r\n\t\tconst timeout = (this.config.timeoutSeconds * 1000) || undefined;\r\n\r\n\t\treturn this.init = Promise.all([\r\n\t\t\tthis.initializeToken(),\r\n\t\t\tthis.eventBus.awaitEvent('load', 'error', timeout)\r\n\t\t])\r\n\t\t\t.then(([token]) => {\r\n\t\t\t\tthis.logger.log('embed loaded, authenticating');\r\n\t\t\t\tthis.eventBus.publish('authenticated', { token });\r\n\t\t\t\tthis.eventBus.awaitEvent('authChanged', 'error', timeout);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis._playerStatus = PlayerStatus.Error;\r\n\t\t\t\tthis.logger.error('Embed initialization error: ', err);\r\n\t\t\t\tthis.eventBus.publishError('initializationFailed');\r\n\t\t\t\tthis.eventBus.emitLocalError('Error loading embed content', err);\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tprotected initializeToken(): Promise<any> {\r\n\t\tif (!this.config.token) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tif (this.config.token.type !== TokenType.ACCESS_TOKEN) {\r\n\t\t\treturn Promise.reject('Unsupported token type');\r\n\t\t}\r\n\r\n\t\treturn Promise.resolve({\r\n\t\t\taccessToken: this.config.token.value\r\n\t\t});\r\n\t}\r\n\tprotected initializeEmbed(): void {\r\n\t\tthis.eventBus.on('videoLoaded', (e: any) => {\r\n\t\t\tthis._info = e;\r\n\t\t\tthis._playerStatus = PlayerStatus.Paused;\r\n\t\t});\r\n\t\t//don't include status in information, since it can change\r\n\t\tthis.eventBus.on('webcastLoaded', ({status, ...info}: any) => {\r\n\t\t\tthis._info = info;\r\n\t\t});\r\n\t\t\r\n\t\tthis.eventBus.on('playerStatusChanged', e => this._playerStatus = e.status);\r\n\t\tthis.eventBus.on('subtitlesChanged', subtitles => {\r\n\t\t\tthis._currentSubtitles = subtitles;\r\n\t\t});\r\n\t}\r\n\tprotected abstract getEmbedUrl(id: string, config: VbrickEmbedConfig);\r\n\t\r\n\tpublic on<T extends TVbrickEvent>(event: T, listener: IListener<T>): void {\r\n\t\t//ensure internal updates take effect before calling client handlers\r\n\t\tthis.eventBus.on<any>(event, (e: any) => setTimeout(() => listener(e)));\r\n\t}\r\n\r\n\tpublic off<T extends TVbrickEvent>(event: T, listener: IListener<T>): void {\r\n\t\tthis.eventBus.off(event, listener);\r\n\t}\r\n\r\n\tprivate render(): HTMLIFrameElement {\r\n\t\tconst iframe = document.createElement('iframe');\r\n\t\tiframe.setAttribute('frameborder', '0');\r\n\t\tiframe.setAttribute('allowFullScreen', '')\r\n\t\tiframe.allow = 'autoplay';\r\n\t\tiframe.width = this.config.width || '100%';\r\n\t\tiframe.height = this.config.height || '100%';\r\n\t\tiframe.src = this.iframeUrl;\r\n\r\n\t\tif (this.config.className) {\r\n\t\t\tiframe.className = this.config.className;\r\n\t\t}\r\n\r\n\t\tthis.container.appendChild(iframe);\r\n\r\n\t\treturn iframe;\r\n\t}\r\n\r\n\tpublic destroy(): void {\r\n\t\tthis.iframe.remove();\r\n\t\tthis.eventBus.destroy();\r\n\t\tthis.init = null;\r\n\t\tthis.unsubscribes?.forEach(fn => fn());\r\n\t}\r\n\r\n\tpublic async updateToken(newToken: VbrickSDKToken): Promise<void> {\r\n\t\tthis.config.token = newToken;\r\n\t\ttry {\r\n\t\t\tconst token = await this.initializeToken();\r\n\t\t\tthis.eventBus.publish('authChanged', { token });\r\n\t\t\tawait this.eventBus.awaitEvent('authChanged', 'error');\r\n\t\t} catch (error) {\r\n\t\t\tthis.logger.error('Error updating token: ', error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * parses a config object and converts into query parameters for the iframe embed URL\r\n * @param config \r\n */\r\n export function getEmbedQuery(config: VbrickEmbedConfig): Record<string, undefined | boolean | string> {\r\n\treturn {\r\n\t\ttk: !!config.token,\r\n\t\tpopupAuth: !config.token && (config.popupAuth ? 'true' : 'false'), //popupAuth requires a true value\r\n\t\taccent: config.accentColor,\r\n\t\tautoplay: config.autoplay,\r\n\t\tforceClosedCaptions: config.forcedCaptions,\r\n\t\tloopVideo: config.playInLoop,\r\n\t\tnoCc: config.hideSubtitles,\r\n\t\tnoCenterButtons: config.hideOverlayControls,\r\n\t\tnoChapters: config.hideChapters,\r\n\t\tnoFullscreen: config.hideFullscreen,\r\n\t\tnoPlayBar: config.hidePlayControls,\r\n\t\tnoSettings: config.hideSettings,\r\n\t\tstartAt: config.startAt\r\n\t};\r\n}\r\n","import { getEmbedUrl } from '../util';\r\nimport { IVbrickVideoEmbed } from './IVbrickApi';\r\nimport { IVideoInfo } from \"./IVbrickTypes\";\r\nimport { getEmbedQuery, VbrickEmbed } from './VbrickEmbed';\r\nimport { VbrickEmbedConfig, VbrickVideoEmbedConfig } from './VbrickEmbedConfig';\r\n\r\n/**\r\n * Internal class used to model an embedded video\r\n */\r\nexport class VbrickVideoEmbed extends VbrickEmbed<IVideoInfo> implements IVbrickVideoEmbed {\r\n\r\n\t/**\r\n\t * Current position in video in seconds\r\n\t */\r\n\tpublic get currentTime(): number {\r\n\t\treturn this._currentTime;\r\n\t}\r\n\tprivate _currentTime: number;\r\n\r\n\t/**\r\n\t * Duration of video in seconds. Will be undefined for live content\r\n\t */\r\n\tpublic get duration(): number {\r\n\t\treturn this.info?.duration;\r\n\t}\r\n\r\n\t/**\r\n\t * Contains metadata for the video\r\n\t * @deprecated Use `info` instead\r\n\t */\r\n\tpublic get videoInfo(): IVideoInfo {\r\n\t\treturn this.info;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tid: string,\r\n\t\tconfig: VbrickVideoEmbedConfig,\r\n\t\tcontainer: HTMLElement\r\n\t) {\r\n\t\tsuper(id, config, container);\r\n\t}\r\n\r\n\t/**\r\n\t * sets playback rate \r\n\t * @param speed {number} 0-16, default is 1\r\n\t */\r\n\tpublic setPlaybackSpeed(speed: number): void {\r\n\t\tif (this.isLive) {\r\n\t\t\tthis.logger.log('Live video, cannot change speed');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.eventBus.publish('setPlaybackSpeed', { speed });\r\n\t}\r\n\r\n\t/**\r\n\t * sets the current time in the video\r\n\t * @param currentTime {number} 0 - video duration\r\n\t */\r\n\tpublic seek(currentTime: number) {\r\n\t\tif (this.isLive) {\r\n\t\t\tthis.logger.log('Live video, seek');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.eventBus.publish('seek', { currentTime });\r\n\t}\r\n\r\n\tprotected initializeEmbed(): void {\r\n\t\tsuper.initializeEmbed();\r\n\t\tthis.eventBus.on('currentTime', e => {\r\n\t\t\tthis._currentTime = e.currentTime;\r\n\t\t\t// update duration in videoInfo?\r\n\t\t});\r\n\t}\r\n\tprotected getEmbedUrl(id: string, config: VbrickEmbedConfig): string {\r\n\t\treturn getEmbedUrl(config.baseUrl, '/embed', {\r\n\t\t\tid,\r\n\t\t\t...getEmbedQuery(config)\r\n\t\t});\r\n\t}\r\n}\r\n","import { VbrickSDKToken } from '../VbrickSDK';\r\nimport { IVbrickWebcastEmbed, WebcastStatus } from './IVbrickApi';\r\nimport { initializeWebcastToken } from './webcastAuth';\r\nimport { VbrickEmbedConfig, VbrickWebcastEmbedConfig } from './VbrickEmbedConfig';\r\nimport { getEmbedUrl } from '../util';\r\nimport { IWebcastInfo, IWebcastLayout } from \"./IVbrickTypes\";\r\nimport { getEmbedQuery, VbrickEmbed } from './VbrickEmbed';\r\n\r\nexport class VbrickWebcastEmbed extends VbrickEmbed<IWebcastInfo> implements IVbrickWebcastEmbed {\r\n\r\n\tpublic get webcastStatus() {\r\n\t\treturn this._webcastStatus;\r\n\t};\r\n\tprivate _webcastStatus: WebcastStatus = WebcastStatus.Loading;\r\n\t\r\n\tconstructor(\r\n\t\tprivate readonly webcastId: string,\r\n\t\tconfig: VbrickWebcastEmbedConfig,\r\n\t\tcontainer: HTMLElement\r\n\t) {\r\n\t\tsuper(webcastId, config, container);\r\n\t}\r\n\r\n\tprotected initializeToken(): Promise<VbrickSDKToken> {\r\n\t\treturn initializeWebcastToken(this.webcastId, this.config);\r\n\t}\r\n\r\n\tprotected async initializeEmbed(): Promise<void> {\r\n\t\tsuper.initializeEmbed();\r\n\r\n\t\t(<const>['webcastStarted', 'broadcastStarted', 'broadcastStopped', 'webcastEnded']).forEach(event => {\r\n\t\t\tthis.eventBus.on(event, data => this._webcastStatus = data.status);\r\n\t\t});\r\n\r\n\t\tthis.eventBus.on('webcastLoaded', e => {\r\n\t\t\tthis._webcastStatus = e.status;\r\n\t\t\t// start initially with hidden slides\r\n\t\t\tif (this.config.showFullWebcast) {\r\n\t\t\t\tthis.updateLayout({ video: true, presentation: false });\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if a webcast is completed it may redirect to a recoreded version of it\r\n\t\tthis.eventBus.on('videoLoaded', () => {\r\n\t\t\tthis._webcastStatus = WebcastStatus.Completed;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic updateLayout(layout: IWebcastLayout) {\r\n\t\tthis.eventBus.publish('updateLayout', layout);\r\n\t}\r\n\tprotected getEmbedUrl(id: string, config: VbrickEmbedConfig): string {\r\n\t\treturn getEmbedUrl(config.baseUrl, `/embed/webcast/${id}`, {\r\n\t\t\tenableFullRev: config.showFullWebcast,\r\n\t\t\t...getEmbedQuery(config)\r\n\t\t});\r\n\t}\r\n}\r\n","/**\r\n * @public\r\n */\r\nexport enum WebcastStatus {\r\n\t/**\r\n\t * Embedded webcast is authenticating\r\n\t */\r\n\tLoading = 'Loading',\r\n\t/**\r\n\t * Embedded webcast is authenticated and waiting for webcast to start\r\n\t */\r\n\tScheduled = 'Scheduled',\r\n\t/**\r\n\t * Webcast is active (but not currently Broadcasting)\r\n\t */\r\n\tInProgress = 'InProgress',\r\n\t/**\r\n\t * Webcast is active with video stream\r\n\t */\r\n\tBroadcasting = 'Broadcasting',\r\n\t/**\r\n\t * Webcast has ended\r\n\t */\r\n\tCompleted = 'Completed',\r\n\t/**\r\n\t * Fatal error embedding webcast\r\n\t */\r\n\tError = 'Error'\r\n}\r\n","import { TokenType, VbrickSDKConfig } from \"../VbrickSDK\";\r\n\r\nexport function initializeWebcastToken(webcastId: string, config: VbrickSDKConfig): Promise<any> {\r\n\r\n\tif(config.token?.type !== TokenType.JWT) {\r\n\t\treturn Promise.resolve({\r\n\t\t\taccessToken: config.token?.value\r\n\t\t});\r\n\t}\r\n\r\n\tconst issuer = config.token.issuer;\r\n\tconst token = config.token.value;\r\n\r\n\treturn fetch(`${config.baseUrl}/external/auth/jwt/${webcastId}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'x-requested-with': 'xmlhttprequest'\r\n\t\t\t},\r\n\t\t\tbody: `{\r\n\t\t\t\t\"token\": \"${issuer} ${token}\"\r\n\t\t\t}`\r\n\t\t})\r\n\t\t.then(response => {\r\n\t\t\tif(!response.ok) {\r\n\t\t\t\treturn Promise.reject('Unable to authenticate jwt');\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(response => ({\r\n\t\t\t...response,\r\n\t\t\tissuer\r\n\t\t}));\r\n\r\n}\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport function isString (val: any): boolean {\r\n\treturn Object.prototype.toString.call(val) === '[object String]';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function lookupElement(element: string | HTMLElement): HTMLElement {\r\n\tconst el: HTMLElement = element instanceof HTMLElement ? element : document.querySelector(element);\r\n\r\n\tif(!el) {\r\n\t\tthrow new Error('Rev SDK Error: Could not resolve element');\r\n\t}\r\n\r\n\treturn el;\r\n}\r\n\r\nexport function getEmbedUrl(baseUrl: string, endpoint: string, params: Record<string, any>) {\r\n\tconst query = Object.entries(params)\r\n\t\t.map(([key, value]) =>\r\n\t\t\t!value ? undefined :\r\n\t\t\tvalue === true ? key :\r\n\t\t\t`${key}=${encodeURIComponent(value)}`)\r\n\t\t.filter(Boolean)\r\n\t\t.join('&');\r\n\r\n\treturn `${baseUrl}${endpoint}?${query}`;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * A javascript SDK for embedding or calling rev APIs\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\nexport { embedWebcast } from './embed/EmbedWebcast';\r\nexport { embedVideo } from './embed/EmbedVideo';\r\n\r\nexport * from './VbrickSDK';\r\nexport * from './embed/VbrickEmbedConfig';\r\nexport * from './embed/IVbrickApi';\r\n\r\nimport { embedWebcast } from './embed/EmbedWebcast';\r\nimport { embedVideo } from './embed/EmbedVideo';\r\nimport { TokenType } from './VbrickSDK';\r\nimport { PlayerStatus } from './embed/PlayerStatus';\r\nimport { WebcastStatus } from './embed/WebcastStatus';\r\n\r\n/**\r\n * @public\r\n */\r\nconst revSDK = {\r\n    embedWebcast,\r\n    embedVideo,\r\n    TokenType,\r\n    PlayerStatus,\r\n    WebcastStatus\r\n};\r\n\r\nexport default revSDK;"],"sourceRoot":""}